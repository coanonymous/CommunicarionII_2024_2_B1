options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: P1_G8
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: P1_grupo8
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nclass blk (gr. sync_block ):\n\n\tdef __init__ ( self\
      \ ) : # only default arguments here\n\t    gr. sync_block . __init__ (\n\t \
      \       self,\n\t\tname ='e_Acum', # will show up in GRC\n\t\tin_sig =[ np.float32\
      \ ],\n\t\tout_sig =[ np.float32 ]\n\t     )\n\t     \n\tdef work(self,input_items,\
      \ output_items):\n\t    x = input_items [0] # Senial de entrada.\n\t    y0 =\
      \ output_items [0] # Senial acumulada\n\t    y0[:] = np.cumsum (x)\n\t    \n\
      \            \n            \n            \n\t    return len (y0) \n\t\t\n\t\t\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('e_Acum', 'blk', [], [('0', 'float', 1)], [('0', 'float', 1)], '',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 164.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass blk (gr.sync_block ):\n\tdef __init__ ( self\
      \ ) : # only default arguments here\n\t    gr.sync_block.__init__(\n\t\tself,\n\
      \t\tname ='e_Diff ', # will show up in GRC\n\t\tin_sig =[np.float32],\n\t\t\
      out_sig =[np.float32]\n\t    self.acum_anterior = 0\n\t    )\n\n\n\tdef work\
      \ (self , input_items , output_items ):\n\t\tx = input_items [0] # Senial de\
      \ entrada .\n\t\ty0 = output_items [0] # Senial acumulada diferencial\n\t\t\n\
      \t\tN = len (x)\n\t\tdiff = np.cumsum (x) - self.acum_anterior\n\t\tself.acum_anterior\
      \ = diff [N-1]\n\t\ty0[:] = diff\n\t\treturn len (y)\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 212.0]
    rotation: 0
    state: true
connections: []

metadata:
  file_format: 1
  grc_version: 3.9.8.0
